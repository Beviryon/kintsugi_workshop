import React, { useState, useEffect, useRef } from 'react';
import { Button, Icon } from 'semantic-ui-react';
import 'semantic-ui-css/semantic.min.css';
import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';
import './App.css';

// Quiz data intÃ©grÃ©
const quizData = [
    {
      question: "Comment vous sentez-vous aujourd'hui ?",
      options: ["Bien", "Pas trÃ¨s bien", "TrÃ¨s mal"],
      responses: [
        "C'est super ! Continuez Ã  prendre soin de vous.",
        "Je suis dÃ©solÃ© d'entendre Ã§a. Pouvez-vous me dÃ©crire vos symptÃ´mes ?",
        "Je suis vraiment dÃ©solÃ© que vous vous sentiez si mal. Voulez-vous que je vous mette en contact avec un professionnel de santÃ© ?"
      ]
    },
    {
      question: "Avez-vous de la fiÃ¨vre ?",
      options: ["Oui", "Non", "Je ne suis pas sÃ»r"],
      responses: [
        "La fiÃ¨vre peut Ãªtre un signe d'infection. Depuis combien de temps avez-vous de la fiÃ¨vre ?",
        "C'est bon signe. Avez-vous d'autres symptÃ´mes ?",
        "Il serait utile de prendre votre tempÃ©rature. Avez-vous un thermomÃ¨tre Ã  la maison ?"
      ]
    },
    {
      question: "Ressentez-vous de l'anxiÃ©tÃ© ou du stress ?",
      options: ["Oui, beaucoup", "Un peu", "Non, pas vraiment"],
      responses: [
        "Je comprends que cette situation puisse Ãªtre stressante. Voulez-vous que je vous donne quelques techniques de relaxation ?",
        "C'est normal de ressentir un peu d'anxiÃ©tÃ©. Essayez de prendre de profondes respirations et de vous concentrer sur des pensÃ©es positives.",
        "C'est bien que vous vous sentiez calme. Continuez Ã  prendre soin de votre santÃ© mentale autant que de votre santÃ© physique."
      ]
    },
    {
      question: "Avez-vous des difficultÃ©s Ã  respirer ?",
      options: ["Oui", "Un peu", "Non"],
      responses: [
        "Des difficultÃ©s respiratoires peuvent Ãªtre sÃ©rieuses. Je vous recommande de consulter un mÃ©decin rapidement.",
        "Surveillez attentivement ce symptÃ´me. Si cela s'aggrave, n'hÃ©sitez pas Ã  consulter un mÃ©decin.",
        "C'est rassurant. Continuez Ã  surveiller vos symptÃ´mes et n'hÃ©sitez pas Ã  me tenir informÃ© de tout changement."
      ]
    },
    {
      question: "Avez-vous perdu le goÃ»t ou l'odorat rÃ©cemment ?",
      options: ["Oui", "Non", "Je ne suis pas sÃ»r"],
      responses: [
        "La perte du goÃ»t ou de l'odorat peut Ãªtre un symptÃ´me de certaines infections. Il serait prudent de vous isoler et de consulter un mÃ©decin.",
        "C'est un bon signe. Continuez Ã  surveiller vos symptÃ´mes.",
        "Essayez de faire un test simple, comme sentir du cafÃ© ou goÃ»ter quelque chose de fort. Si vous avez des doutes, il vaut mieux consulter."
      ]
    },
    {
      question: "Avez-vous Ã©tÃ© en contact avec quelqu'un qui a Ã©tÃ© testÃ© positif au COVID-19 ?",
      options: ["Oui", "Non", "Je ne suis pas sÃ»r"],
      responses: [
        "Il est recommandÃ© de vous isoler et de vous faire tester. Voulez-vous que je vous donne des informations sur les centres de test prÃ¨s de chez vous ?",
        "C'est rassurant. Continuez nÃ©anmoins Ã  suivre les mesures de prÃ©caution recommandÃ©es.",
        "Par prÃ©caution, il serait sage de limiter vos contacts et de surveiller l'apparition de symptÃ´mes. N'hÃ©sitez pas Ã  vous faire tester au moindre doute."
      ]
    },
    {
      question: "Comment est votre sommeil ces derniers temps ?",
      options: ["Bon", "PerturbÃ©", "TrÃ¨s mauvais"],
      responses: [
        "Un bon sommeil est essentiel pour la santÃ©. Continuez Ã  maintenir une bonne hygiÃ¨ne de sommeil.",
        "Un sommeil perturbÃ© peut affecter votre santÃ©. Avez-vous essayÃ© des techniques de relaxation avant de dormir ?",
        "Un mauvais sommeil peut avoir un impact significatif sur votre santÃ©. Voulez-vous que je vous donne quelques conseils pour amÃ©liorer votre sommeil ?"
      ]
    },
    {
      question: "Comment dÃ©cririez-vous votre niveau d'Ã©nergie ?",
      options: ["Normal", "FatiguÃ©", "Ã‰puisÃ©"],
      responses: [
        "C'est bien que vous vous sentiez en forme. Continuez Ã  prendre soin de vous.",
        "La fatigue peut Ãªtre due Ã  de nombreux facteurs. Assurez-vous de bien vous reposer et de manger Ã©quilibrÃ©.",
        "Un Ã©puisement constant peut Ãªtre le signe d'un problÃ¨me de santÃ©. Il serait peut-Ãªtre bon d'en parler Ã  un mÃ©decin."
      ]
    },
    {
      question: "Avez-vous des douleurs musculaires ou articulaires ?",
      options: ["Oui", "Un peu", "Non"],
      responses: [
        "Des douleurs persistantes mÃ©ritent attention. Avez-vous essayÃ© des Ã©tirements doux ou des applications de chaleur ?",
        "Des douleurs lÃ©gÃ¨res peuvent souvent Ãªtre soulagÃ©es par du repos et des exercices doux. Si elles persistent, consultez un mÃ©decin.",
        "C'est bien que vous n'ayez pas de douleurs. L'exercice rÃ©gulier peut aider Ã  maintenir cette condition."
      ]
    },
    {
      question: "Comment est votre appÃ©tit ces derniers jours ?",
      options: ["Normal", "DiminuÃ©", "AugmentÃ©"],
      responses: [
        "Un appÃ©tit normal est un bon signe. Continuez Ã  maintenir une alimentation Ã©quilibrÃ©e.",
        "Une perte d'appÃ©tit peut Ãªtre due au stress ou Ã  une maladie. Essayez de manger de petits repas frÃ©quents et nutritifs.",
        "Une augmentation de l'appÃ©tit peut Ãªtre normale, mais si elle est accompagnÃ©e d'autres symptÃ´mes, il serait bon d'en parler Ã  un mÃ©decin."
      ]
    }
  ];;

function App() {
    const [open, setOpen] = useState(false);
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [isRecording, setIsRecording] = useState(false);
    const [currentAudio, setCurrentAudio] = useState(null);
    const [currentQuizIndex, setCurrentQuizIndex] = useState(0);
    const [quizStarted, setQuizStarted] = useState(false);
    const chatEndRef = useRef(null);

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    useEffect(() => {
        if (messages.length === 0) {
            addMessage('bot', "Bonjour ! Je suis lÃ  pour discuter avec vous et vous aider Ã  vous sentir mieux. Voulez-vous commencer le questionnaire ?");
        }
    }, []);

    const addMessage = (sender, text, options = null) => {
        setMessages(prevMessages => [...prevMessages, { sender, text, options }]);
    };

    const handleSendMessage = () => {
        if (inputMessage.trim()) {
            addMessage('user', inputMessage);
            setInputMessage('');
            processUserInput(inputMessage);
        }
    };

    const processUserInput = (input) => {
        const lowercaseInput = input.toLowerCase();

        if (!quizStarted) {
            if (lowercaseInput.includes('oui')) {
                setQuizStarted(true);
                askNextQuestion();
            } else {
                addMessage('bot', "D'accord, n'hÃ©sitez pas Ã  me dire quand vous voulez commencer le questionnaire.");
            }
            return;
        }

        const currentQuiz = quizData[currentQuizIndex];

        if (currentQuiz) {
            const matchedOptionIndex = currentQuiz.options.findIndex(option => 
                lowercaseInput.includes(option.toLowerCase())
            );

            if (matchedOptionIndex !== -1) {
                addMessage('bot', currentQuiz.responses[matchedOptionIndex]);
                setCurrentQuizIndex(prevIndex => {
                    const newIndex = prevIndex + 1;
                    if (newIndex < quizData.length) {
                        setTimeout(() => {
                            askNextQuestion();
                        }, 1000);
                    } else {
                        setTimeout(() => {
                            addMessage('bot', "Merci pour vos rÃ©ponses. Souhaitez-vous parler Ã  un professionnel de santÃ© ? Je peux vous mettre en contact si vous le dÃ©sirez.");
                        }, 1000);
                    }
                    return newIndex;
                });
            } else {
                addMessage('bot', "Je n'ai pas bien compris votre rÃ©ponse. Pouvez-vous choisir parmi les options proposÃ©es ?");
            }
        } else if (lowercaseInput.includes('oui') && messages[messages.length - 1].text.includes("professionnel de santÃ©")) {
            addMessage('bot', "D'accord, voici un numÃ©ro que vous pouvez appeler : 01 23 45 67 89. Ou vous pouvez utiliser ce lien WhatsApp : [lien WhatsApp]");
        } else {
            addMessage('bot', "Je comprends. N'hÃ©sitez pas Ã  me poser d'autres questions si vous en avez.");
        }
    };

    const askNextQuestion = () => {
        if (currentQuizIndex < quizData.length) {
            const nextQuiz = quizData[currentQuizIndex];
            addMessage('bot', nextQuiz.question, nextQuiz.options);
        }
    };

    const handleRecordAudio = () => {
        setIsRecording(!isRecording);
        if (!isRecording) {
            setTimeout(() => {
                addMessage('user', 'ðŸŽ¤ Audio message');
                setIsRecording(false);
                processUserInput('Audio message');
            }, 3000);
        }
    };

    const handlePlayAudio = (text) => {
        if (currentAudio && currentAudio.text === text) {
            if (speechSynthesis.speaking) {
                speechSynthesis.pause();
            } else {
                speechSynthesis.resume();
            }
        } else {
            if (currentAudio) {
                speechSynthesis.cancel();
            }
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.text = text;
            speechSynthesis.speak(utterance);
            setCurrentAudio(utterance);
        }
    };

    return (
        <div className="app-container">
            <Button className="ui button" icon labelPosition="right" onClick={() => setOpen(true)}>
                Ouvrir le Chat SantÃ©
                <Icon name="heartbeat" />
            </Button>
            <Popup open={open} onClose={() => setOpen(false)} modal nested>
                {close => (
                    <div className="chat-modal">
                        <button className="close-button" onClick={close}>
                            &times;
                        </button>
                        <div className="chat-header">
                            <Icon name="user doctor" />
                            <span>Assistant SantÃ©</span>
                        </div>
                        <div className="chat-content">
                            <div className="chat-messages">
                                {messages.map((msg, index) => (
                                    <div key={index} className={`message ${msg.sender}`}>
                                        <p>{msg.text}</p>
                                        {msg.sender === 'bot' && msg.options && (
                                            <div className="message-options">
                                                {msg.options.map((option, optionIndex) => (
                                                    <button key={optionIndex} onClick={() => processUserInput(option)}>
                                                        {option}
                                                    </button>
                                                ))}
                                            </div>
                                        )}
                                        {msg.sender === 'bot' && (
                                            <div className="audio-controls">
                                                <Icon 
                                                    name={currentAudio && currentAudio.text === msg.text && speechSynthesis.speaking ? "pause" : "play"}
                                                    className={`icon ${currentAudio && currentAudio.text === msg.text && speechSynthesis.speaking ? "pause-icon" : "play-icon"}`}
                                                    onClick={() => handlePlayAudio(msg.text)}
                                                />
                                            </div>
                                        )}
                                    </div>
                                ))}
                                <div ref={chatEndRef} />
                            </div>
                            <div className="chat-input">
                                <input
                                    type="text"
                                    value={inputMessage}
                                    onChange={(e) => setInputMessage(e.target.value)}
                                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                                    placeholder="Tapez votre message..."
                                />
                                <button onClick={handleRecordAudio}>
                                    <Icon name={isRecording ? 'stop' : 'microphone'} />
                                </button>
                                <button onClick={handleSendMessage}>
                                    <Icon name="send" />
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </Popup>
        </div>
    );
}

export default App;
